function AssetBrowser::setupCreateNewLevelAsset(%this)
{
   NewAssetPropertiesInspector.startGroup("Level");
   NewAssetPropertiesInspector.addField("LevelName", "Level Name", "String",  "Human-readable name of new level", "", "", %this.newAssetSettings);
   NewAssetPropertiesInspector.addField("levelPreviewImage", "Level Preview Image", "Image",  "Preview Image for the level", "", "", %this.newAssetSettings);
   
   NewAssetPropertiesInspector.addField("isSubScene", "Is SubScene", "bool",  "Is this levelAsset intended as a subScene", "", "", %this.newAssetSettings);

   NewAssetPropertiesInspector.endGroup();
}

function AssetImporter::importLevelAsset(%this, %assetItem)
{
}

function AssetBrowser::createLevelAsset(%this)
{
   %moduleName = AssetBrowser.newAssetSettings.moduleName;
   %modulePath = "data/" @ %moduleName;
   
   %assetName = AssetBrowser.newAssetSettings.assetName;
   
   %assetPath = NewAssetTargetAddress.getText() @ "/";
   
   %misExtension = AssetBrowser.newAssetSettings.isSubScene ? ".subMis" : ".mis";
   
   %tamlpath = %assetPath @ %assetName @ ".asset.taml";
   %levelPath = %assetPath @ %assetName @ %misExtension;
   
   %asset = new LevelAsset()
   {
      AssetName = %assetName;
      versionId = 1;
      LevelFile = %assetName @ %misExtension;
      DecalsFile = %assetName @ ".mis.decals";
      PostFXPresetFile = %assetName @ ".postfxpreset." @ $TorqueScriptFileExtension;
      ForestFile = %assetName @ ".forest";
      NavmeshFile = %assetName @ ".nav";
      LevelName = AssetBrowser.newAssetSettings.levelName;
      AssetDescription = AssetBrowser.newAssetSettings.description;
      PreviewImage = AssetBrowser.newAssetSettings.levelPreviewImage;
      isSubScene = AssetBrowser.newAssetSettings.isSubScene;
   };
   
   TamlWrite(%asset, %tamlpath);
   
   //Special-case where if we're doing a save-as action, it'll base on the current scene.
   //Otherwise we're doing a basic create action, so just base it off our editor's default
   if(EditorGui.saveAs)
   {
      getRootScene().save(%levelPath);
   }
   else if(!pathCopy("tools/levels/DefaultEditorLevel.mis", %levelPath, false))
   {
      echo("Unable to copy template level file!");
   }
   
   replaceInFile(%levelPath, "EditorTemplateLevel", %assetName);
   
   //Generate the associated files
   DecalManagerSave( %assetPath @ %asset.DecalsFile );
   PostFXManager::savePresetHandler( %assetPath @ %asset.PostFXPresetFile );

	%moduleDef = ModuleDatabase.findModule(%moduleName, 1);
	%addSuccess = AssetDatabase.addDeclaredAsset(%moduleDef, %tamlpath);
	
	if(!%addSuccess)
	{
	   error("AssetBrowser::createLevelAsset() - failed to add declared asset: " @ %tamlpath @ " for module: " @ %moduleDef);
	}

	AssetBrowser.refresh();
	
	return %tamlpath;  
}

//==============================================================================
//SubScene derivative
//==============================================================================
function AssetBrowser::setupCreateNewSubScene(%this)
{
   %this.newAssetSettings.isSubScene = true;
   %this.newAssetSettings.assetType = "LevelAsset";
}

//==============================================================================

function AssetBrowser::editLevelAsset(%this, %assetDef)
{
   if(!%assetDef.isSubScene)
      schedule( 1, 0, "EditorOpenMission", %assetDef);
}

//Renames the asset
function AssetBrowser::renameLevelAsset(%this, %assetDef, %newAssetName)
{
   %newFilename = renameAssetLooseFile(%assetDef.LevelFile, %newAssetName);
   
   if(!%newFilename $= "")
      return;
      
   //TODO the other loose files
      
   %assetDef.LevelFile = %newFilename;
   %assetDef.saveAsset();
   
   renameAssetFile(%assetDef, %newAssetName);
}

//Duplicates the asset
function AssetBrowser::duplicateLevelAsset(%this, %assetDef, %newAssetName)
{
   %duplicatedAsset = duplicateAssetFile(%assetDef, %newAssetName);
   
   %newFilename = duplicateAssetLooseFile(%assetDef.LevelFile, %newAssetName);
   
   if(!%newFilename $= "")
      return;
      
   %module = AssetBrowser.dirHandler.getModuleFromAddress(%duplicatedAsset);
      
   %dupAssetDef = AssetDatabase.acquireAsset(%module.ModuleId @ ":" @ %newAssetName);

   %dupAssetDef.LevelFile = fileName(%newFilename);
   %dupAssetDef.saveAsset();
}

//Deletes the asset
function AssetBrowser::deleteLevelAsset(%this, %assetDef)
{
   AssetDatabase.deleteAsset(%assetDef.getAssetId(), true);
}

//Moves the asset to a new path/module
function AssetBrowser::moveLevelAsset(%this, %assetDef, %destination)
{
   %currentModule = AssetDatabase.getAssetModule(%assetDef.getAssetId());
   %targetModule = AssetBrowser.dirHandler.getModuleFromAddress(%destination);
   
   %newAssetPath = moveAssetFile(%assetDef, %destination);
   
   if(%newAssetPath $= "")
      return false;

   moveAssetLooseFile(%assetDef.getLevelPath(), %destination);
   moveAssetLooseFile(%assetDef.getPreviewImagePath(), %destination);
   moveAssetLooseFile(%assetDef.getPostFXPresetPath(), %destination);
   moveAssetLooseFile(%assetDef.getDecalsPath(), %destination);
   moveAssetLooseFile(%assetDef.getForestPath(), %destination);
   moveAssetLooseFile(%assetDef.getNavmeshPath(), %destination);
   
   AssetDatabase.removeDeclaredAsset(%assetDef.getAssetId());
   AssetDatabase.addDeclaredAsset(%targetModule, %newAssetPath);
}
   
function AssetBrowser::buildLevelAssetPreview(%this, %assetDef, %previewData)
{
   %previewData.assetName = %assetDef.assetName;
   %previewData.assetPath = %assetDef.getLevelPath();
   %previewData.doubleClickCommand = "schedule( 1, 0, \"EditorOpenMission\", "@%assetDef@");";
   
   %levelPreviewImage = %assetDef.PreviewImage;
         
   if(isFile(%levelPreviewImage))
      %previewData.previewImage = %levelPreviewImage;
   else
      %previewData.previewImage = "ToolsModule:levelIcon_image";
   
   %previewData.assetFriendlyName = %assetDef.assetName;
   %previewData.assetDesc = %assetDef.description;
   %previewData.tooltip = "Asset Name: " @ %assetDef.assetName @ "\n" @
      "Asset Type: Level Asset\n" @ 
      "Asset Definition ID: " @ %assetDef @ "\n" @ 
      "Level File path: " @ %assetDef.getLevelPath(); 
}

function createAndAssignLevelAsset(%moduleName, %assetName)
{
   $createAndAssignField.apply(%moduleName @ ":" @ %assetName);
}

function EWorldEditor::createSelectedAsSubScene( %this, %object )
{
   //create new level asset here
   AssetBrowser.setupCreateNewAsset("SubScene", AssetBrowser.selectedModule, "finishCreateSelectedAsSubScene");
   %this.contextActionObject = %object;
}

function finishCreateSelectedAsSubScene(%assetId)
{
   echo("finishCreateSelectedAsSubScene");
   
   %subScene = new SubScene() {
      levelAsset = %assetId;
   };
   
   %levelAssetDef = AssetDatabase.acquireAsset(%assetId);
   %levelFilePath = %levelAssetDef.getLevelPath();
   
   //write out to file
   EWorldEditor.contextActionObject.save(%levelFilePath);
   
   AssetDatabase.releaseAsset(%assetId);
   
   getRootScene().add(%subScene);
   
   EWorldEditor.contextActionObject.delete();
   
   %subScene.load();
   
   %subScene.recalculateBounds();
   
   %scalar = $SubScene::createScalar;
   if(%scalar $= "")
      %scalar = 1.5;
   
   //pad for loading boundary
   %subScene.scale = VectorScale(%subScene.scale, %scalar);
}

function GuiInspectorTypeLevelAssetPtr::onControlDropped( %this, %payload, %position )
{
   Canvas.popDialog(EditorDragAndDropLayer);
   
   // Make sure this is a color swatch drag operation.
   if( !%payload.parentGroup.isInNamespaceHierarchy( "AssetPreviewControlType_AssetDrop" ) )
      return;

   %assetType = %payload.assetType;
   %module = %payload.moduleName;
   %assetName = %payload.assetName;
   
   if(%assetType $= "LevelAsset")
   {
      %cmd = %this @ ".apply(\""@ %module @ ":" @ %assetName @ "\");";
      eval(%cmd);
   }
   
   EWorldEditor.isDirty = true;
}

function AssetBrowser::onLevelAssetEditorDropped(%this, %assetDef, %position)
{
   %assetId = %assetDef.getAssetId();
   
   if(!%assetDef.isSubScene)
   {
      errorf("Cannot drag-and-drop LevelAsset into WorldEditor");
      return;  
   }
   
   %newSubScene = new SubScene()
   {
      position = %position;
      levelAsset = %assetId;
   };
   
   getScene(0).add(%newSubScene);
   
   %newSubScene.load();
   %newSubScene.recalculateBounds();
   
   EWorldEditor.clearSelection();
   EWorldEditor.selectObject(%newSubScene);
   
   EWorldEditor.dropSelection();
      
   EWorldEditor.isDirty = true;
   
   MECreateUndoAction::submit(%newSubScene );
}