//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// This script function is called before a client connection
// is accepted.  Returning "" will accept the connection,
// anything else will be sent back as an error to the client.
// All the connect args are passed also to onConnectRequest
//
function GameConnection::onConnectRequest( %this, %netAddress, %name )
{
   echo("Connect request from: " @ %netAddress);
   if($Server::PlayerCount >= $pref::Server::MaxPlayers)
      return "CR_SERVERFULL";
   return "";
}

//-----------------------------------------------------------------------------
// This script function is the first called on a client accept
function GameConnection::onConnect( %this, %clientData )
{
   // Send down the connection error info, the client is responsible for
	// displaying this message if a connection error occurs.
	messageClient(%this, 'MsgConnectionError', "", $Pref::Server::ConnectionError);
	
	// Send mission information to the client
	sendLoadInfoToClient(%this);
	
	// Simulated client lag for testing...
	// %this.setSimulatedNetParams(0.1, 30);
	
	// Get the client's unique id:
	// %authInfo = %this.getAuthInfo();
	// %this.guid = getField(%authInfo, 3);
	%this.guid = 0;
	addToServerGuidList(%this.guid);
	
	// Set admin status
	if (%this.getAddress() $= "local")
	{
		%this.isAdmin = true;
		%this.isSuperAdmin = true;
	}
	else
	{
		%this.isAdmin = false;
		%this.isSuperAdmin = false;
	}
	
	echo("CADD: "@ %this @" "@ %this.getAddress());

	// If the mission is running, go ahead download it to the client
	if ($missionRunning)
	{
		%this.loadMission();
	}
	else if ($Server::LoadFailMsg !$= "")
	{
		messageClient(%this, 'MsgLoadFailed', $Server::LoadFailMsg);
	}
	
	%this.connectData = %clientData;
	
	//Signal and listener logic for the spawn config/processing here
	%this.GetEventManager().registerEvent("setSpawnObjectTypeComplete");
   %this.GetEventManager().registerEvent("setSpawnObjectTypeFailed");
   %this.GetEventManager().registerEvent("setSpawnPointComplete");
   %this.GetEventManager().registerEvent("setSpawnPointFailed");
   %this.GetEventManager().registerEvent("postSpawnComplete");
   
   %this.listener = new ScriptMsgListener() {
      class = GameConnectionListener;
   }; 
   %this.GetEventManager().subscribe( %this.listener, "setSpawnObjectTypeComplete" ); 
   %this.GetEventManager().subscribe( %this.listener, "setSpawnObjectTypeFailed" ); 
   %this.GetEventManager().subscribe( %this.listener, "setSpawnPointComplete" );
   %this.GetEventManager().subscribe( %this.listener, "setSpawnPointFailed" );
   %this.GetEventManager().subscribe( %this.listener, "postSpawnComplete" );
	
	callGamemodeFunction("onClientConnect", %this);
	
	$Server::PlayerCount++;
}

function GameConnection::GetEventManager(%this)
{
   if( !isObject( %this.eventManager ) )
      %this.eventManager = new EventManager() { 
         queue = "GameConnectionEventManager";
      };
      
   return %this.eventManager;
}

function GameConnection::spawnControlObject( %this )
{
    //baseline controlObject spawn type with extention points
    %this.spawnClass = "Camera";
    %this.spawnDBType = "CameraData";
    %this.spawnDataBlock = "Observer";
    
    %this.numModsNeedingLoaded = 0;
    %this.moduleLoadedDone = 0;
    %modulesIDList = getModulesAndGameModesList(true, "Game");
    
    %this.numModsNeedingLoaded = getNumCanCallOnObjectList("setSpawnObjectType", %modulesIDList);
    
    if (%this.numModsNeedingLoaded)
       callOnObjectList("setSpawnObjectType", %modulesIdList, %this);
    else
        %this.listener.onSetSpawnObjectTypeComplete(%this); //just jump to progress
}

function GameConnectionListener::onSetSpawnObjectTypeComplete( %this, %client )
{
    %client.moduleLoadedDone++;

    if (%client.moduleLoadedDone < %client.numModsNeedingLoaded)
        return; //continue to wait  
    
    if (isObject(%client.player))
    {
        // The client should not already have a player. Assigning
        // a new one could result in an uncontrolled player object.
        error("Attempting to create a player for a client that already has one!");
    }

    %client.setSpawnPoint();
}

function GameConnectionListener::onSetSpawnObjectTypeFailed( %this, %client, %canContinueOnFail )
{
   errorf("Failed to properly set Spawn Object Type for client: " @ %client);
}

function GameConnection::setSpawnPoint( %this )
{
    //baseline spawn point config rules with extention points
    %this.playerSpawnGroups = "PlayerSpawnPoints PlayerDropPoints";
    %this.spawnPoint = "";
    %this.spawnLocation = "0 0 0";
    %this.spawnProperties = "";
    %this.spawnScript = "";
    
    %this.numModsNeedingLoaded = 0;
    %this.moduleLoadedDone = 0;
    %modulesIDList = getModulesAndGameModesList(true, "Game");
    
    %this.numModsNeedingLoaded = getNumCanCallOnObjectList("setSpawnPoint", %modulesIDList);
    
    if (%this.numModsNeedingLoaded)
        callOnObjectList("setSpawnPoint", %modulesIdList, %this);
    else
        %this.listener.onSetSpawnPointComplete(%this);   
}

function GameConnectionListener::onSetSpawnPointComplete( %this, %client )
{
    %client.moduleLoadedDone++;
    if (%client.moduleLoadedDone < %client.numModsNeedingLoaded)
        return; //continue to wait 
        
    // Spawn with the engine's Sim::spawnObject() function
    %client.player = spawnObject(%client.spawnClass, %client.spawnDataBlock, %client.spawnProperties, %client.spawnScript);
    
    if(!isObject(%client.player))
       error("Failed to spawn player object!");
    
    if (!%client.player.isMemberOfClass(%client.spawnClass))
        warn("Trying to spawn a class that does not derive from "@ %client.spawnClass);

    // Add the player object to MissionCleanup so that it
    // won't get saved into the level files and will get
    // cleaned up properly
    MissionCleanup.add(%client.player);
   
    // Store the client object on the player object for
    // future reference
    %client.player.client = %client;
    
    if (isObject(%client.player) && %client.spawnLocation != "-1")
        %client.player.setTransform(%client.spawnLocation);
    else
    {
        // If we weren't able to create the player object then warn the user
        // When the player clicks OK in one of these message boxes, we will fall through
        // to the "if (!isObject(%player))" check below.
        if (isDefined("%this.spawnDataBlock"))
        {
            MessageBoxOK("Spawn Failed",
                "Unable to create a player with class " @ %client.spawnClass @
                " and datablock " @ %client.spawnDataBlock @ ".\n\nStarting as an Observer instead.",
                "");
        }
        else
        {
            MessageBoxOK("Spawn Failed",
                "Unable to create a player with class " @ %client.spawnClass @
                ".\n\nStarting as an Observer instead.",
                "");
        }
    }
    
    // Give the client control of the camera if in the editor
   if( $startWorldEditor )
   {
      %control = %client.camera;
      %control.mode = "Fly";
      EditorGui.syncCameraGui();
   }
   else
      %control = %client.player;
      
   //Non-cameras will scope down to the client automatically, but if it's 
   //JUST a camera, we'll tell it to do so now
   if(%control.isMemberOfClass("Camera"))
      %control.scopeToClient(%client);
      
   // Allow the player/camera to receive move data from the GameConnection.  Without this
   // the user is unable to control the player/camera.
   if (!isDefined("%noControl"))
      %client.setControlObject(%control);
    
    %client.onPostSpawn();
}

function GameConnectionListener::onSetSpawnPointFailed( %this, %client, %canContinueOnFail )
{
   errorf("Failed to properly set Spawn Object Type for client: " @ %client);
}

function GameConnection::onPostSpawn( %this )
{
    %this.numModsNeedingLoaded = 0;
    %this.moduleLoadedDone = 0;
    %modulesIDList = getModulesAndGameModesList(true, "Game");
    
    %this.numModsNeedingLoaded = getNumCanCallOnObjectList("onPostSpawn", %modulesIDList);
    
    if (%this.numModsNeedingLoaded)
        callOnObjectList("onPostSpawn", %modulesIdList, %this);
    else
        %this.listener.onPostSpawnComplete(%this);    
}

function GameConnectionListener::onPostSpawnComplete(%this, %client)
{
    %client.moduleLoadedDone++;
    if (%client.moduleLoadedDone < %client.numModsNeedingLoaded)
        return; //continue to wait 
        
    //Continue on. Room for special handling here if needbe but not expressly required
}

//-----------------------------------------------------------------------------
// A player's name could be obtained from the auth server, but for
// now we use the one passed from the client.
// %realName = getField( %authInfo, 0 );
//
function GameConnection::setPlayerName(%this,%name)
{
   %this.sendGuid = 0;

   // Minimum length requirements
   %name = trim( strToPlayerName( %name ) );
   if ( strlen( %name ) < 3 )
      %name = "Poser";

   // Make sure the alias is unique, we'll hit something eventually
   if (!isNameUnique(%name))
   {
      %isUnique = false;
      for (%suffix = 1; !%isUnique; %suffix++)  {
         %nameTry = %name @ "." @ %suffix;
         %isUnique = isNameUnique(%nameTry);
      }
      %name = %nameTry;
   }

   // Tag the name with the "smurf" color:
   %this.nameBase = %name;
   %this.playerName = addTaggedString("\cp\c8" @ %name @ "\co");
}

function isNameUnique(%name)
{
   %count = ClientGroup.getCount();
   for ( %i = 0; %i < %count; %i++ )
   {
      %test = ClientGroup.getObject( %i );
      %rawName = stripChars( detag( getTaggedString( %test.playerName ) ), "\cp\co\c6\c7\c8\c9" );
      if ( strcmp( %name, %rawName ) == 0 )
         return false;
   }
   return true;
}

//-----------------------------------------------------------------------------
// This function is called when a client drops for any reason
//
function GameConnection::onDrop(%this, %reason)
{
   %entityIds = parseMissionGroupForIds("Entity", "");
   %entityCount = getWordCount(%entityIds);
   
   for(%i=0; %i < %entityCount; %i++)
   {
      %entity = getWord(%entityIds, %i);
      
      for(%e=0; %e < %entity.getCount(); %e++)
      {
         %child = %entity.getObject(%e);
         if(%child.getClassName() $= "Entity")
            %entityIds = %entityIds SPC %child.getID();  
      }
      
      %entity.notify("onClientDisconnect", %this);
   }
   
   if($missionRunning)
   {
      %hasGameMode = callGamemodeFunction("onClientLeaveGame", %this);
   }
   
   removeFromServerGuidList( %this.guid );

   $Server::PlayerCount--;
}

//-----------------------------------------------------------------------------

function GameConnection::startMission(%this)
{
   // Inform the client the mission starting
   commandToClient(%this, 'MissionStart', $missionSequence);
}


function GameConnection::endMission(%this)
{
   // Inform the client the mission is done.  Note that if this is
   // called as part of the server destruction routine, the client will
   // actually never see this comment since the client connection will
   // be destroyed before another round of command processing occurs.
   // In this case, the client will only see the disconnect from the server
   // and should manually trigger a mission cleanup.
   commandToClient(%this, 'MissionEnd', $missionSequence);
}
